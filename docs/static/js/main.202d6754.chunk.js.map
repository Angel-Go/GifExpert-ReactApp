{"version":3,"sources":["components/AddNewCategory.js","components/GetGifItem.js","hooks/useFetchGifs.js","functions/getGifs.js","components/ShowGifGrid.js","GifExpertApp.js","index.js"],"names":["AddNewCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","length","categories","type","value","onChange","target","GetGifItem","title","url","className","src","alt","useFetchGifs","category","data","loading","images","setImages","useEffect","setTimeout","encodeURI","fetch","then","respuesta","json","map","img","id","downsized_medium","getGifs","gifs","ShowGifGrid","gif","protoTypes","PropTypes","string","isRequired","GifExpertApp","style","color","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNA0CeA,EAtCQ,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEtB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAqBA,OACI,sBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAS,IAIpBP,GAAc,SAAAQ,GAAU,OAAMN,GAAN,mBAAqBM,OAC7CL,EAAc,MAKlB,SACI,uBACIM,KAAK,OACLC,MAAOR,EACPS,SArBQ,SAACN,GACjBF,EAAcE,EAAEO,OAAOF,a,OCVlBG,EAAa,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAEhC,OACI,oBAAIC,UAAU,WAAd,SACI,sBAAKA,UAAU,uDAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,6BAAKA,UCLRK,EAAe,SAACC,GAWzB,MAA4BnB,mBAAS,CACjCoB,KAAM,GACNC,SAAS,IAFb,mBAAOC,EAAP,KAAeC,EAAf,KAmBA,OAdAC,qBAAU,WAENC,YAAW,YCrBI,SAACN,GAQpB,IACML,EAAG,uDADM,mCACN,cAA+DY,UAAUP,GAAzE,YAET,OAAOQ,MAAMb,GACRc,MAAK,SAAAC,GAAS,OAAIA,EAAUC,UAC5BF,MAAK,qBAAGR,KAAgBW,KAAI,SAAAC,GACzB,MAAO,CACHC,GAAID,EAAIC,GACRpB,MAAOmB,EAAInB,MACXC,IAAKkB,EAAIV,OAAOY,iBAAiBpB,YDKrCqB,CAAQhB,GACHS,MAAK,SAAAQ,GACFb,EAAU,CACNH,KAAMgB,EACNf,SAAS,SAGtB,OAEJ,CAACF,IAEGG,GE3BEe,EAAc,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAO1B,EAA6BD,EAAaC,GAA9BiB,EAAZ,EAAOhB,KAAWC,EAAlB,EAAkBA,QAQlB,OACI,qCACI,oBAAIN,UAAU,mCAAd,SAAkDI,IACjDE,EAAU,aAAe,KAC1B,oBAAIN,UAAU,kBAAd,SAEQqB,EAAKL,KAAI,SAAAO,GAAG,OACR,cAAC,EAAD,CAEIL,GAAIK,EAAIL,GACRpB,MAAOyB,EAAIzB,MACXC,IAAKwB,EAAIxB,KAHJwB,EAAIL,aAYrCI,EAAYE,WAAa,CACrBpB,S,OAAUqB,EAAUC,OAAOC,YC/B/B,IA2BeC,EA3BM,WAEjB,MAAoC3C,mBAAS,CAAC,KAA9C,mBAAOO,EAAP,KAAmBR,EAAnB,KAEA,OACI,gCACI,8CACA,mBAAG6C,MAAO,CAACC,MAAO,WAAlB,6BACA,cAAC,EAAD,CAAgB9C,cAAeA,IAC/B,uBACA,oBAAIgB,UAAU,qBAAd,SAOQR,EAAWwB,KAAI,SAAAZ,GAAQ,OACnB,cAAC,EAAD,CAA4BA,SAAUA,GAApBA,YCtB1C2B,IAASC,OAKP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.202d6754.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// setCategories es una Prop REQUERIDA\r\nconst AddNewCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    // handleInput captura el evento \"onChange\" del input, para despues\r\n    // el valor ingresado en el input establecerlo como el nuevo valor del\r\n    // \"inputValue\"\r\n    const handleInput = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.length > 2) {\r\n            // Mediante setCategories() se cambia el estado de categories\r\n            // Ejecutando una funcion de flecha que genera un nuevo arreglo con todos los elementos\r\n            // anteriores y agregandole uno nuevo con el valor del input en ese momento\r\n            setCategories(categories => [ inputValue, ...categories]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInput}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddNewCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddNewCategory;","import React from 'react';\r\n\r\nexport const GetGifItem = ({ title, url }) => {\r\n\r\n    return (\r\n        <li className=\"listaGif\">\r\n            <div className=\"listaGif-content animate__animated animate__fadeInUp\">\r\n                <img src={url} alt={title}></img>\r\n                <h3>{title}</h3>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getGifs } from '../functions/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    /*\r\n    Este hook recibe una categoria, crea una variable (objeto) con estado \"images\" y luego\r\n    mediante la funcion \"getGifs\" (que hace una peticion a la API Giphy) obtiene un objeto que \r\n    contiene el id, titulo y url de un GIF. Los valores obtenidos son  añadidos a la variable\r\n    \"images\" dentro del elemento \"data\" al mismo tiempo que cambia el valor del elemento loading\r\n    a false.\r\n    Finalmente el objeto \"images\" es retornado con sus nuevos valores\r\n    */\r\n\r\n    const [images, setImages] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        setTimeout(() => {\r\n            getGifs(category)\r\n                .then(gifs => {\r\n                    setImages({\r\n                        data: gifs,\r\n                        loading: false\r\n                    })\r\n                })\r\n        }, 1000);\r\n\r\n    }, [category]);\r\n\r\n    return images;\r\n\r\n}\r\n","export const getGifs = (category) => {\r\n\r\n    /*\r\n    Esta funcion hace una peticion asincrona a la API de Giphy mandandole la categoria y el numero de\r\n    resultados que espera recibir (8) y retorna una promesa con un objeto que contiene el id, titulo y url\r\n    de la data regresada por la API mencionada.\r\n    */\r\n\r\n    const apiKey = 'rV8bYTQ31V0v1VT0Te3cLj3nuf7Kymb9';\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${encodeURI(category)}&limit=8`;\r\n\r\n    return fetch(url)\r\n        .then(respuesta => respuesta.json())\r\n        .then(({ data }) => data.map(img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images.downsized_medium.url\r\n            } \r\n        }))\r\n};\r\n\r\n// FUNCION EQUIVALENTE A LA DE ARRIBA, PERO UTILIZANDO async y await\r\n\r\n/*\r\nexport const getGifs = async(category) => {\r\n\r\n    const apiKey = 'rV8bYTQ31V0v1VT0Te3cLj3nuf7Kymb9';\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${encodeURI(category)}&limit=8`;\r\n\r\n    const respuesta = await fetch(url);\r\n    const {data} = await respuesta.json();\r\n\r\n    return data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n};*/\r\n","import PropTypes from 'prop-types';\r\n\r\nimport { GetGifItem } from './GetGifItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\n\r\nexport const ShowGifGrid = ({ category }) => {\r\n\r\n    /*\r\n    Se crean dos variables (\"gifs\" que contiene un arreglo de objetos con el id, title y url de un GIF\r\n    Y \"loading\" que tiene un valor boleano) a partir de una desestructuracion del objeto retornado\r\n    por el hook \"useFetchGifs\"\r\n    */\r\n    const {data:gifs, loading} = useFetchGifs(category);\r\n\r\n    /*\r\n    Mediante el funtional component \"GetGifItem\" se añade al componente retornado un elemento lista con\r\n    el GIF y su titulo de la categoria recibida. Mediante gifs.map se van agregando todos los gif con su titulo\r\n    dentro de la lista <ul>\r\n    */\r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"animate__animated animate__pulse\">{category}</h2>\r\n            {loading ? 'Loading...' : null}\r\n            <ul className=\"list-items-grid\">\r\n                {\r\n                    gifs.map(gif =>\r\n                        <GetGifItem\r\n                            key={gif.id}\r\n                            id={gif.id}\r\n                            title={gif.title}\r\n                            url={gif.url}\r\n                        />\r\n                    )\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nShowGifGrid.protoTypes = {\r\n    category: PropTypes.string.isRequired\r\n}","import React, { useState } from 'react';\r\n\r\nimport AddNewCategory from './components/AddNewCategory';\r\nimport { ShowGifGrid } from './components/ShowGifGrid';\r\n\r\n\r\n// Este FuntionalComponent es el principal de la aplicación, la cual esta mandando llamar el\r\n// componente AddNewCategory (enviando la funcion setCategories dentro de las props)\r\n// que se encarga de procesar los datos ingresados en el input para agregarlos a \"categories\"\r\n// las cuales se muestran en el browser enlistados.\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['']);\r\n\r\n    return (\r\n        <div>\r\n            <h1>GifExpertApp</h1>\r\n            <p style={{color: '#61DBFB'}}>Bucador de Gifs</p>\r\n            <AddNewCategory setCategories={setCategories} />\r\n            <hr></hr>\r\n            <ul className=\"list-category-grid\">\r\n                {/* El metodo .map() recorre el arreglo \"categories\" y simplemente retorna\r\n                todos los gif asociados a cada categoria dentro del arreglo. Todos los gif son ordenados\r\n                dentro de una lista no ordenada lo cual se puede observar analisando el funtional component\r\n                \"ShowGifGrid\" */}\r\n                \r\n                {\r\n                    categories.map(category =>\r\n                        <ShowGifGrid key={category} category={category}/>\r\n                    )\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\n\nReactDOM.render(\n  // StrictMode es una herramienta para destacar problemas potenciales en la aplicación.\n  // Al igual que Fragment, StrictMode no renderiza nada en la interfaz de usuario.\n  // Las comprobaciones hechas por el modo estricto solamente son ejecutadas en el \n  // modo de desarrollo; no van a impactar producción.\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}